# Junior Dev Library API

## О проекте

RESTful API для управления библиотекой книг с возможностями создания, чтения, обновления и удаления записей. Реализована аутентификация пользователей с помощью JWT, обеспечена безопасность хранения паролей и разграничение доступа к ресурсам.

---

## Инструкция по запуску

1. Клонируйте репозиторий:  
   ```bash
   git clone https://github.com/JackSMiIe/junior_dev_library_api.git
   cd junior_dev_library_api
   
2. Создайте и активируйте виртуальное окружение, установите зависимости:
    ```bash
    python3 -m venv .venv
    source .venv/bin/activate
    pip install -r requirements.txt
    
3. Выполните миграции базы данных:
    ```bash
    alembic upgrade head

4. Запустите приложение:
    ```bash
    uvicorn app.main:app --reload

## Регистрация первого пользователя
Для регистрации нового пользователя воспользуйтесь эндпоинтом /users/signup (POST). Передайте в теле запроса необходимые данные (username, email, password). Пароль автоматически захешируется перед сохранением.

## Структура проекта

app/ — основная папка с кодом приложения

models.py — модели базы данных (SQLAlchemy)

schemas.py — Pydantic-схемы для валидации данных

crud.py — операции CRUD для работы с БД

auth.py — аутентификация, JWT, хеширование паролей

database.py — настройки подключения к базе и сессии

main.py — точка входа и маршруты FastAPI

tests — тесты для проверки бизнес-логики и API

## Структура базы данных и решения
Таблица books:

id (int, PK) — уникальный идентификатор книги

title (str) — название

author (str) — автор

year (int) — год издания

isbn (str, уникальный) — международный стандартный номер книги

quantity (int) — количество доступных экземпляров

Таблица users:

id (int, PK) — уникальный пользователь

username (str, уникальный)

email (str, уникальный)

hashed_password (str) — захешированный пароль

is_active (bool) — статус активности пользователя

Решение выделить уникальные поля (isbn, username, email) обеспечило целостность данных и быстродействие поиска.


## Реализация бизнес-логики
Создание и удаление книг: реализованы через функции CRUD с проверками на уникальность ISBN и существование книги.

Обновление книг: поддерживает частичное обновление полей. Валидация бизнес-правила неотрицательного количества экземпляров проводится на уровне CRUD.

Получение списка книг: реализована с параметрами skip и limit для пагинации и оптимизации запросов.

Особенность:
Частичное обновление реализовано через Pydantic .dict(exclude_unset=True) для избежания перезаписи всех полей.

Аутентификация
Используется JWT (JSON Web Tokens) для выдачи и проверки токенов доступа.

Токены содержат идентификатор пользователя и срок действия, подписываются секретным ключом с алгоритмом HS256.

Для генерации и проверки JWT используется библиотека PyJWT.

Пароли пользователей захешированы с помощью passlib (bcrypt), что обеспечивает безопасность хранения.

Защищены эндпоинты, изменяющие данные (создание, обновление, удаление), требующие в заголовке Authorization: Bearer <token>.

Реализация аутентификации проста, надёжна и хорошо масштабируется.

Логирование истории изменений книг

Ввести отдельную таблицу book_logs с информацией о каждом изменении книги: id, book_id, user_id, action_type (create, update, delete), timestamp, changes (JSON с деталями).

Вызов логирующей функции при каждом изменении данных через CRUD.

Использование JWT для идентификации пользователя, совершившего действие.

Это поможет вести аудит, восстанавливать данные и анализировать изменения.

## Критерии оценки и соответствие
Функциональность: Все CRUD операции и аутентификация реализованы корректно.

Код: Структурирован, читаем, следует PEP8.

Работа с БД: Используется SQLAlchemy ORM, миграции Alembic, вторая миграция корректно модифицирует структуру.

Безопасность: JWT и bcrypt применены корректно, эндпоинты защищены.

Тесты: Покрывают бизнес-логику и проверяют защищённые эндпоинты.

Документация: Полная и понятная, объясняет ключевые решения.

Подход к проблемам: Реализованы специфичные бизнес-правила с учётом безопасности и удобства.
